{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport Swal from 'sweetalert2';\nlet RegisterComponent = class RegisterComponent {\n  constructor(accountService, router) {\n    this.accountService = accountService;\n    this.router = router;\n    this.checkDuplicateUsername = false;\n    this.checkDuplicateEmail = false;\n    this.validation_messages = {\n      username: [{\n        type: 'required',\n        message: 'Vui lòng nhập username.'\n      }, {\n        type: 'maxlength',\n        message: 'Vui lòng nhập username ít hơn 40 kí tự.'\n      }],\n      birthday: [{\n        type: 'required',\n        message: 'Vui lòng nhập ngày sinh.'\n      }, {\n        type: 'checkAge',\n        message: 'Tuổi phải từ 18 tuổi.'\n      }],\n      email: [{\n        type: 'required',\n        message: 'Vui lòng nhập đúng định dạng.'\n      }],\n      password: [{\n        type: 'required',\n        message: 'Vui lòng nhập địa chỉ.'\n      }, {\n        type: 'maxlength',\n        message: 'Vui lòng nhập username ít hơn 16 kí tự.'\n      }, {\n        type: 'minlength',\n        message: 'Vui lòng nhập username nhiều hơn 6 kí tự.'\n      }]\n    };\n  }\n  ngOnInit() {\n    this.today = new Date().toISOString().split(\"T\")[0];\n    this.formRegister = new FormGroup({\n      username: new FormControl('', [Validators.required, Validators.maxLength(40)]),\n      email: new FormControl('', Validators.required),\n      password: new FormControl('', [Validators.required, Validators.maxLength(16), Validators.minLength(6)]),\n      birthday: new FormControl('', [Validators.required, this.checkDateOfBirth])\n    });\n  }\n  createAccount() {\n    this.accountService.createAccount(this.formRegister.value).subscribe(res => Swal.fire('Done!', 'Chúc mừng bạn đăng kí thành công', 'success'));\n  }\n  checkDateOfBirth(control) {\n    const dateOfBirth = new Date(control.value);\n    if (new Date().getFullYear() - dateOfBirth.getFullYear() < 18) {\n      return {\n        checkAge: true\n      };\n    }\n    return null;\n  }\n};\nRegisterComponent = __decorate([Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})], RegisterComponent);\nexport { RegisterComponent };","map":{"version":3,"mappings":";AAAA,SAAQA,SAAS,QAAe,eAAe;AAC/C,SAAyBC,WAAW,EAAEC,SAAS,EAAEC,UAAU,QAAO,gBAAgB;AAGlF,OAAOC,IAAI,MAAM,aAAa;AAMvB,IAAMC,iBAAiB,GAAvB,MAAMA,iBAAiB;EAC5BC,YAAoBC,cAA8B,EAAUC,MAAa;IAArD,mBAAc,GAAdD,cAAc;IAA0B,WAAM,GAANC,MAAM;IAG1D,2BAAsB,GAAS,KAAK;IACpC,wBAAmB,GAAS,KAAK;IAWzC,wBAAmB,GAAG;MACpBC,QAAQ,EAAE,CACR;QAACC,IAAI,EAAE,UAAU;QAAEC,OAAO,EAAE;MAAyB,CAAC,EACtD;QAACD,IAAI,EAAE,WAAW;QAAEC,OAAO,EAAE;MAAyC,CAAC,CACxE;MACDC,QAAQ,EAAE,CACR;QAACF,IAAI,EAAE,UAAU;QAAEC,OAAO,EAAE;MAA0B,CAAC,EACvD;QAACD,IAAI,EAAE,UAAU;QAAEC,OAAO,EAAE;MAAuB,CAAC,CACrD;MACDE,KAAK,EAAE,CACL;QAACH,IAAI,EAAE,UAAU;QAAEC,OAAO,EAAE;MAA+B,CAAC,CAC7D;MACDG,QAAQ,EAAE,CACR;QAACJ,IAAI,EAAE,UAAU;QAAEC,OAAO,EAAE;MAAwB,CAAC,EACrD;QAACD,IAAI,EAAE,WAAW;QAAEC,OAAO,EAAE;MAAyC,CAAC,EACvE;QAACD,IAAI,EAAE,WAAW;QAAEC,OAAO,EAAE;MAA2C,CAAC;KAE5E;EA/BD;EAKAI,QAAQ;IACN,IAAI,CAACC,KAAK,GAAE,IAAIC,IAAI,EAAE,CAACC,WAAW,EAAE,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAClD,IAAI,CAACC,YAAY,GAAE,IAAIlB,SAAS,CAAC;MAC/BO,QAAQ,EAAE,IAAIR,WAAW,CAAC,EAAE,EAAC,CAACE,UAAU,CAACkB,QAAQ,EAAClB,UAAU,CAACmB,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC;MAC5ET,KAAK,EAAE,IAAIZ,WAAW,CAAC,EAAE,EAACE,UAAU,CAACkB,QAAQ,CAAC;MAC9CP,QAAQ,EAAE,IAAIb,WAAW,CAAC,EAAE,EAAC,CAACE,UAAU,CAACkB,QAAQ,EAAElB,UAAU,CAACmB,SAAS,CAAC,EAAE,CAAC,EAACnB,UAAU,CAACoB,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;MACrGX,QAAQ,EAAE,IAAIX,WAAW,CAAC,EAAE,EAAC,CAACE,UAAU,CAACkB,QAAQ,EAAE,IAAI,CAACG,gBAAgB,CAAC;KAC1E,CAAC;EACJ;EAmBAC,aAAa;IACX,IAAI,CAAClB,cAAc,CAACkB,aAAa,CAAC,IAAI,CAACL,YAAY,CAACM,KAAK,CAAC,CAACC,SAAS,CAChEC,GAAG,IACDxB,IAAI,CAACyB,IAAI,CAAC,OAAO,EAAE,kCAAkC,EAAE,SAAS,CAAC,CACtE;EACH;EACAL,gBAAgB,CAACM,OAAwB;IACvC,MAAMC,WAAW,GAAG,IAAId,IAAI,CAACa,OAAO,CAACJ,KAAK,CAAC;IAC3C,IAAI,IAAIT,IAAI,EAAE,CAACe,WAAW,EAAE,GAAGD,WAAW,CAACC,WAAW,EAAE,GAAG,EAAE,EAAE;MAC7D,OAAO;QAACC,QAAQ,EAAG;MAAI,CAAC;;IAE1B,OAAO,IAAI;EACb;CACD;AA/CY5B,iBAAiB,eAL7BL,SAAS,CAAC;EACTkC,QAAQ,EAAE,cAAc;EACxBC,WAAW,EAAE,2BAA2B;EACxCC,SAAS,EAAE,CAAC,0BAA0B;CACvC,CAAC,GACW/B,iBAAiB,CA+C7B;SA/CYA,iBAAiB","names":["Component","FormControl","FormGroup","Validators","Swal","RegisterComponent","constructor","accountService","router","username","type","message","birthday","email","password","ngOnInit","today","Date","toISOString","split","formRegister","required","maxLength","minLength","checkDateOfBirth","createAccount","value","subscribe","res","fire","control","dateOfBirth","getFullYear","checkAge","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\ASUS\\Desktop\\FE-6\\FE_Module6\\src\\app\\register\\register.component.ts"],"sourcesContent":["import {Component, OnInit} from '@angular/core';\r\nimport {AbstractControl, FormControl, FormGroup, Validators} from \"@angular/forms\";\r\nimport {AccountService} from \"../service/AccountService\";\r\nimport {Router} from \"@angular/router\";\r\nimport Swal from 'sweetalert2';\r\n@Component({\r\n  selector: 'app-register',\r\n  templateUrl: './register.component.html',\r\n  styleUrls: ['./register.component.css']\r\n})\r\nexport class RegisterComponent implements OnInit{\r\n  constructor(private accountService: AccountService, private router:Router) {\r\n  }\r\n  formRegister!:FormGroup;\r\n  public  checkDuplicateUsername:boolean=false;\r\n  public  checkDuplicateEmail:boolean=false;\r\n  today!:any\r\n  ngOnInit() {\r\n    this.today= new Date().toISOString().split(\"T\")[0];\r\n    this.formRegister= new FormGroup({\r\n      username: new FormControl('',[Validators.required,Validators.maxLength(40)]),\r\n      email: new FormControl('',Validators.required),\r\n      password: new FormControl('',[Validators.required, Validators.maxLength(16),Validators.minLength(6)]),\r\n      birthday: new FormControl('',[Validators.required, this.checkDateOfBirth]),\r\n    })\r\n  }\r\n  validation_messages = {\r\n    username: [\r\n      {type: 'required', message: 'Vui lòng nhập username.'},\r\n      {type: 'maxlength', message: 'Vui lòng nhập username ít hơn 40 kí tự.'}\r\n    ],\r\n    birthday: [\r\n      {type: 'required', message: 'Vui lòng nhập ngày sinh.'},\r\n      {type: 'checkAge', message: 'Tuổi phải từ 18 tuổi.'}\r\n    ],\r\n    email: [\r\n      {type: 'required', message: 'Vui lòng nhập đúng định dạng.'}\r\n    ],\r\n    password: [\r\n      {type: 'required', message: 'Vui lòng nhập địa chỉ.'},\r\n      {type: 'maxlength', message: 'Vui lòng nhập username ít hơn 16 kí tự.'},\r\n      {type: 'minlength', message: 'Vui lòng nhập username nhiều hơn 6 kí tự.'},\r\n    ]\r\n  };\r\n  createAccount(){\r\n    this.accountService.createAccount(this.formRegister.value).subscribe(\r\n        res=>\r\n          Swal.fire('Done!', 'Chúc mừng bạn đăng kí thành công', 'success')\r\n    )\r\n  }\r\n  checkDateOfBirth(control: AbstractControl) {\r\n    const dateOfBirth = new Date(control.value);\r\n    if (new Date().getFullYear() - dateOfBirth.getFullYear() < 18) {\r\n      return {checkAge : true};\r\n    }\r\n    return null;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}