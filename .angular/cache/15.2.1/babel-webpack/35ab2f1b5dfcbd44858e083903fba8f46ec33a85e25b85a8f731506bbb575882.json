{"ast":null,"code":"import { FormControl, Validators } from \"@angular/forms\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/common\";\nfunction RegisterComponent_div_12_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \" Field is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_div_12_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \" Password must contain at least one number, one uppercase and a lowercase letter and at least 8 characters\");\n    i0.ɵɵelement(2, \"br\");\n    i0.ɵɵtext(3, \"Password cannot contain whitespace \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_div_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 17);\n    i0.ɵɵtemplate(1, RegisterComponent_div_12_div_1_Template, 2, 0, \"div\", 18);\n    i0.ɵɵtemplate(2, RegisterComponent_div_12_div_2_Template, 4, 0, \"div\", 18);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.newPassword.errors == null ? null : ctx_r1.newPassword.errors[\"required\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.newPassword.errors == null ? null : ctx_r1.newPassword.errors[\"pattern\"]);\n  }\n}\nfunction RegisterComponent_div_18_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \" Field is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_div_18_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \" Password must contain at least one number, one uppercase and a lowercase letter and at least 8 characters\");\n    i0.ɵɵelement(2, \"br\");\n    i0.ɵɵtext(3, \"Password cannot contain whitespace \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_div_18_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \" Passwords did not match \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_div_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 17);\n    i0.ɵɵtemplate(1, RegisterComponent_div_18_div_1_Template, 2, 0, \"div\", 18);\n    i0.ɵɵtemplate(2, RegisterComponent_div_18_div_2_Template, 4, 0, \"div\", 18);\n    i0.ɵɵtemplate(3, RegisterComponent_div_18_div_3_Template, 2, 0, \"div\", 18);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.confirmPassword.errors == null ? null : ctx_r3.confirmPassword.errors[\"required\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.confirmPassword.errors == null ? null : ctx_r3.confirmPassword.errors[\"pattern\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r3.passwordsMatching && ctx_r3.isConfirmPasswordDirty);\n  }\n}\nexport class RegisterComponent {\n  ngOnInit() {}\n  constructor(formBuilder) {\n    this.formBuilder = formBuilder;\n    this.passwordsMatching = false;\n    this.isConfirmPasswordDirty = false;\n    this.confirmPasswordClass = 'form-control';\n    this.appConfig = AppConfig;\n    this.newPassword = new FormControl(null, [c => Validators.required(c), Validators.pattern('^((?!.*[s])(?=.*[A-Z])(?=.*d).{8,99})')]);\n    this.confirmPassword = new FormControl(null, [c => Validators.required(c), Validators.pattern('^((?!.*[s])(?=.*[A-Z])(?=.*d).{8,99})')]);\n    this.resetPasswordForm = this.formBuilder.group({\n      newPassword: this.newPassword,\n      confirmPassword: this.confirmPassword\n    });\n  }\n  onSubmit() {\n    if (!this.resetPasswordForm?.valid) {\n      return;\n    }\n  }\n  checkPasswords(pw, cpw) {\n    this.isConfirmPasswordDirty = true;\n    if (pw == cpw) {\n      this.passwordsMatching = true;\n      this.confirmPasswordClass = 'form-control is-valid';\n    } else {\n      this.passwordsMatching = false;\n      this.confirmPasswordClass = 'form-control is-invalid';\n    }\n  }\n}\nRegisterComponent.ɵfac = function RegisterComponent_Factory(t) {\n  return new (t || RegisterComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder));\n};\nRegisterComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: RegisterComponent,\n  selectors: [[\"app-register\"]],\n  decls: 24,\n  vars: 5,\n  consts: [[1, \"h-100\"], [1, \"container\", \"h-100\"], [1, \"card\", \"reset-password-form-card\"], [1, \"card-body\", \"p-5\"], [1, \"card-title\", \"fw-bold\", \"mb-4\"], [1, \"form\", 3, \"formGroup\", \"ngSubmit\"], [1, \"mb-3\"], [\"for\", \"newPassword\"], [\"id\", \"newPassword\", \"type\", \"password\", \"formControlName\", \"newPassword\", 1, \"form-control\"], [\"pw\", \"\"], [\"class\", \"form-text text-danger\", 4, \"ngIf\"], [\"for\", \"confirmPassword\"], [\"id\", \"confirmPassword\", \"type\", \"password\", \"formControlName\", \"confirmPassword\", 1, \"form-control\", 3, \"ngClass\", \"keyup\"], [\"cpw\", \"\"], [1, \"d-flex\", \"align-items-center\"], [\"type\", \"submit\", 1, \"btn\", \"btn-dark\", \"col-5\", \"mx-auto\", 3, \"disabled\"], [\"type\", \"button\", \"appBackButton\", \"\", 1, \"btn\", \"btn-light\", \"col-5\", \"mx-auto\"], [1, \"form-text\", \"text-danger\"], [4, \"ngIf\"]],\n  template: function RegisterComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      const _r9 = i0.ɵɵgetCurrentView();\n      i0.ɵɵelementStart(0, \"section\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"h4\", 4);\n      i0.ɵɵtext(5, \"Reset password\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"form\", 5);\n      i0.ɵɵlistener(\"ngSubmit\", function RegisterComponent_Template_form_ngSubmit_6_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(7, \"div\", 6)(8, \"label\", 7);\n      i0.ɵɵtext(9, \"New password: \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(10, \"input\", 8, 9);\n      i0.ɵɵtemplate(12, RegisterComponent_div_12_Template, 3, 2, \"div\", 10);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(13, \"div\", 6)(14, \"label\", 11);\n      i0.ɵɵtext(15, \"New password (confirmation):\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(16, \"input\", 12, 13);\n      i0.ɵɵlistener(\"keyup\", function RegisterComponent_Template_input_keyup_16_listener() {\n        i0.ɵɵrestoreView(_r9);\n        const _r0 = i0.ɵɵreference(11);\n        const _r2 = i0.ɵɵreference(17);\n        return i0.ɵɵresetView(ctx.checkPasswords(_r0.value, _r2.value));\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(18, RegisterComponent_div_18_Template, 4, 3, \"div\", 10);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(19, \"div\", 14)(20, \"button\", 15);\n      i0.ɵɵtext(21, \" Reset password \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(22, \"button\", 16);\n      i0.ɵɵtext(23, \"Back\");\n      i0.ɵɵelementEnd()()()()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"formGroup\", ctx.resetPasswordForm);\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"ngIf\", ctx.newPassword.invalid && (ctx.newPassword.dirty || ctx.newPassword.touched));\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngClass\", ctx.confirmPasswordClass);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.confirmPassword.invalid && (ctx.confirmPassword.dirty || ctx.confirmPassword.touched));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"disabled\", !ctx.resetPasswordForm.valid);\n    }\n  },\n  dependencies: [i2.NgClass, i2.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["FormControl","Validators","i0","RegisterComponent","ngOnInit","constructor","formBuilder","AppConfig","c","required","pattern","group","newPassword","confirmPassword","onSubmit","resetPasswordForm","valid","checkPasswords","pw","cpw","isConfirmPasswordDirty","passwordsMatching","confirmPasswordClass","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\ASUS\\Desktop\\FE-6\\FE_Module6\\src\\app\\register\\register.component.ts","C:\\Users\\ASUS\\Desktop\\FE-6\\FE_Module6\\src\\app\\register\\register.component.html"],"sourcesContent":["import {Component, OnInit} from '@angular/core';\r\nimport {AbstractControl, FormBuilder, FormControl, FormGroup, Validators} from \"@angular/forms\";\r\n\r\n@Component({\r\n  selector: 'app-register',\r\n  templateUrl: './register.component.html',\r\n  styleUrls: ['./register.component.css']\r\n})\r\nexport class RegisterComponent implements OnInit{\r\n  ngOnInit() {\r\n  }\r\n  passwordsMatching = false;\r\n  isConfirmPasswordDirty = false;\r\n  confirmPasswordClass = 'form-control';\r\n  appConfig = AppConfig;\r\n  newPassword = new FormControl(null, [\r\n    (c: AbstractControl) => Validators.required(c),\r\n    Validators.pattern('^((?!.*[s])(?=.*[A-Z])(?=.*d).{8,99})'),\r\n  ]);\r\n  confirmPassword = new FormControl(null, [\r\n    (c: AbstractControl) => Validators.required(c),\r\n    Validators.pattern('^((?!.*[s])(?=.*[A-Z])(?=.*d).{8,99})'),\r\n  ]);\r\n\r\n  resetPasswordForm = this.formBuilder.group({\r\n    newPassword: this.newPassword,\r\n    confirmPassword: this.confirmPassword,\r\n  });\r\n\r\n  constructor(private formBuilder: FormBuilder) {}\r\n\r\n  onSubmit(): void {\r\n    if (!this.resetPasswordForm?.valid) {\r\n      return;\r\n    }\r\n  }\r\n\r\n  checkPasswords(pw: string, cpw: string) {\r\n    this.isConfirmPasswordDirty = true;\r\n    if (pw == cpw) {\r\n      this.passwordsMatching = true;\r\n      this.confirmPasswordClass = 'form-control is-valid';\r\n    } else {\r\n      this.passwordsMatching = false;\r\n      this.confirmPasswordClass = 'form-control is-invalid';\r\n    }\r\n  }\r\n  // formRegister!:FormGroup;\r\n  // today!:any\r\n  // ngOnInit() {\r\n  //   this.today= new Date().toISOString().split(\"T\")[0];\r\n  //   console.log(this.today)\r\n  //   this.formRegister= new FormGroup({\r\n  //     username: new FormControl(''),\r\n  //     email: new FormControl(''),\r\n  //     password: new FormControl(''),\r\n  //     birthday: new FormControl(''),\r\n  //   })\r\n  // }\r\n  // checkConfirmPassword:boolean=false;\r\n  // passwordInput = document.getElementById(\"password\");\r\n  // confirmPassInput=document.getElementById(\"confirmPassword\")\r\n  // checkConfirmPasswordFuc(){\r\n  //   if (this.passwordInput!=this.confirmPassInput){\r\n  //     this.checkConfirmPassword=true\r\n  //   }else {\r\n  //     this.checkConfirmPassword=false\r\n  //   }\r\n  //   console.log(this.checkConfirmPassword)\r\n  // }\r\n  // createAccount(){\r\n  // }\r\n}\r\n","<!--&lt;!&ndash; Content-->\r\n<!--    ================================================== &ndash;&gt;-->\r\n<!--<div uk-height-viewport=\"expand: true\" class=\"uk-flex uk-flex-middle\">-->\r\n<!--    <div class=\"uk-width-1-3@m uk-width-1-2@s m-auto\">-->\r\n<!--        <div class=\"px-2 uk-animation-scale-up\">-->\r\n<!--            <div class=\"my-4 uk-text-center\">-->\r\n<!--                <h1 class=\"mb-2\"> Sing up  </h1>-->\r\n<!--                <p class=\"my-2\">Do you have an a account. <a routerLink=\"/login\"> Sign in</a> </p>-->\r\n<!--            </div>-->\r\n<!--            <form [formGroup]=\"formRegister\" (ngSubmit)=\"createAccount()\">-->\r\n<!--                <div class=\"uk-form-group\">-->\r\n<!--                    <div class=\"uk-position-relative w-100\">-->\r\n<!--                        <input class=\"uk-input\" type=\"text\" placeholder=\"Your Username\" formControlName=\"username\">-->\r\n<!--                    </div>-->\r\n<!--                </div>-->\r\n<!--                <div class=\"uk-form-group\">-->\r\n<!--                    <div class=\"uk-position-relative w-100\">-->\r\n<!--                        <input class=\"uk-input\" type=\"email\" placeholder=\"Your email \" formControlName=\"email\">-->\r\n<!--                    </div>-->\r\n<!--                </div>-->\r\n<!--                <div class=\"uk-form-group\">-->\r\n<!--                    <div class=\"uk-position-relative w-100\">-->\r\n<!--                        <input class=\"uk-input\" type=\"password\" id=\"password\" placeholder=\"Your password\" formControlName=\"password\">-->\r\n<!--                    </div>-->\r\n<!--                </div>-->\r\n<!--                <div class=\"uk-form-group\">-->\r\n<!--                    <div class=\"uk-position-relative w-100\">-->\r\n<!--                        <input class=\"uk-input\" type=\"password\" id=\"confirmPassword\"  placeholder=\"Confirm password\">-->\r\n<!--                    </div>-->\r\n<!--                </div>-->\r\n<!--                <p>Password </p>-->\r\n<!--                <div class=\"uk-form-group\">-->\r\n<!--                    <div class=\"uk-position-relative w-100\">-->\r\n<!--                        <input class=\"uk-input\" type=\"date\" id=\"start\" name=\"trip-start\"-->\r\n<!--                               value=\"yyyy-mm-dd\"-->\r\n<!--                               min=\"yyyy-01-01\" [max]=\"today\" formControlName=\"birthday\">-->\r\n<!--                    </div>-->\r\n<!--                </div>-->\r\n<!--                <button type=\"submit\" class=\"btn btn-primary btn-block mb-4\" (click)=\"checkConfirmPasswordFuc()\">Get Started</button>-->\r\n\r\n<!--                <a href=\"#\" class=\"text-center uk-display-block\">-->\r\n<!--                    <div class=\"checkbox\">-->\r\n<!--                        <input type=\"checkbox\" id=\"chekcbox2\">-->\r\n<!--                        <label for=\"chekcbox2\"><span class=\"checkbox-icon\"></span> I Agree terms </label>-->\r\n<!--                    </div>  </a>-->\r\n\r\n<!--            </form>-->\r\n<!--        </div>-->\r\n<!--    </div>-->\r\n<!--</div>-->\r\n<section class=\"h-100\">\r\n    <div class=\"container h-100\">\r\n        <div class=\"card reset-password-form-card\">\r\n            <div class=\"card-body p-5\">\r\n                <h4 class=\"card-title fw-bold mb-4\">Reset password</h4>\r\n                <form class=\"form\" [formGroup]=\"resetPasswordForm\" (ngSubmit)=\"onSubmit()\">\r\n                    <div class=\"mb-3\">\r\n                        <label for=\"newPassword\">New password: </label>\r\n                        <input id=\"newPassword\" type=\"password\"\r\n                               class=\"form-control\" formControlName=\"newPassword\" #pw>\r\n                        <div *ngIf=\"newPassword.invalid && (newPassword.dirty || newPassword.touched)\"\r\n                             class=\"form-text text-danger\">\r\n                            <div *ngIf=\"newPassword.errors?.['required']\">\r\n                                Field is required\r\n                            </div>\r\n                            <div *ngIf=\"newPassword.errors?.['pattern']\">\r\n                                Password must contain at least one number, one uppercase and a lowercase letter\r\n                                and at least 8 characters<br>Password cannot contain whitespace\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"mb-3\">\r\n                        <label for=\"confirmPassword\">New password (confirmation):</label>\r\n                        <input id=\"confirmPassword\" type=\"password\" class=\"form-control\"\r\n                               [ngClass]='confirmPasswordClass' formControlName=\"confirmPassword\"\r\n                               #cpw (keyup)='checkPasswords(pw.value, cpw.value)'>\r\n                        <div *ngIf=\"confirmPassword.invalid && (confirmPassword.dirty || confirmPassword.touched)\"\r\n                             class=\"form-text text-danger\">\r\n                            <div *ngIf=\"confirmPassword.errors?.['required']\">\r\n                                Field is required\r\n                            </div>\r\n                            <div *ngIf=\"confirmPassword.errors?.['pattern']\">\r\n                                Password must contain at least one number, one uppercase and a lowercase letter\r\n                                and at least 8 characters<br>Password cannot contain whitespace\r\n                            </div>\r\n                            <div *ngIf='!passwordsMatching && isConfirmPasswordDirty'>\r\n                                Passwords did not match\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"d-flex align-items-center\">\r\n                        <button [disabled]=\"!resetPasswordForm.valid\" type=\"submit\" class=\"btn btn-dark col-5 mx-auto\">\r\n                            Reset password\r\n                        </button>\r\n                        <button type=\"button\" class=\"btn btn-light col-5 mx-auto\" appBackButton>Back</button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</section>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}