{"ast":null,"code":"import { FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport Swal from \"sweetalert2\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../service/account/account.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nfunction LoginComponent_p_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 15);\n    i0.ɵɵtext(1, \"Vui l\\u00F2ng kh\\u00F4ng \\u0111\\u1EC3 tr\\u1ED1ng\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_p_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 15);\n    i0.ɵɵtext(1, \"Vui l\\u00F2ng kh\\u00F4ng \\u0111\\u1EC3 tr\\u1ED1ng\");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class LoginComponent {\n  constructor(accountService, router) {\n    this.accountService = accountService;\n    this.router = router;\n    this.loginForm = new FormGroup({\n      username: new FormControl(\"\", Validators.required),\n      password: new FormControl(\"\", Validators.required)\n    });\n  }\n  ngOnInit() {}\n  login() {\n    this.accountService.login(this.loginForm.value).subscribe(data => {\n      this.accountCheck = data;\n      this.checkLogin(this.accountCheck);\n    }, error => {\n      Swal.fire(' ', '<h2 style=\"color: red; font-size: 32px\">Login Fail!</h2>', 'error');\n    });\n  }\n  findAccountByUsername(username) {\n    this.accountService.findAccountByUsername(username).subscribe(data => {});\n  }\n  checkLogin(accountToken) {\n    this.accountService.setToken(accountToken.token);\n    this.accountService.setAccountToken(accountToken);\n    this.accountService.findById(accountToken.id).subscribe(res => {\n      this.account = res;\n      if (this.account.statusAccount == 1) {\n        Swal.fire(' ', '<h2 style=\"color: red; font-size: 32px\">The account has been banned</h2>', 'error');\n      } else {\n        Swal.fire(' ', '<h2 style=\"color: green; font-size: 32px\">Đăng nhập thành công!!!</h2>', 'success');\n      }\n      for (let i = 0; i < accountToken?.roles.length; i++) {\n        if (accountToken?.roles[i].id == 1) {\n          this.router.navigate([\"/admin\"]);\n          return;\n        }\n      }\n      this.router.navigate([\"/home\"]);\n    });\n  }\n}\nLoginComponent.ɵfac = function LoginComponent_Factory(t) {\n  return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.AccountService), i0.ɵɵdirectiveInject(i2.Router));\n};\nLoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: LoginComponent,\n  selectors: [[\"app-login\"]],\n  decls: 23,\n  vars: 3,\n  consts: [[\"uk-height-viewport\", \"expand: true\", 1, \"uk-flex\", \"uk-flex-middle\"], [1, \"uk-width-1-3@m\", \"uk-width-1-2@s\", \"m-auto\"], [1, \"px-2\", \"uk-animation-scale-up\"], [1, \"my-4\", \"uk-text-center\"], [1, \"mb-2\"], [1, \"my-2\"], [\"routerLink\", \"/register\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"uk-form-group\"], [1, \"uk-position-relative\", \"w-100\"], [\"type\", \"text\", \"placeholder\", \"Your username\", \"formControlName\", \"username\", 1, \"uk-input\"], [\"style\", \"color: red\", 4, \"ngIf\"], [\"type\", \"password\", \"placeholder\", \"Your password\", \"formControlName\", \"password\", 1, \"uk-input\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", \"btn-block\", \"mb-4\"], [\"href\", \"#\", 1, \"text-center\", \"uk-display-block\"], [2, \"color\", \"red\"]],\n  template: function LoginComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"h1\", 4);\n      i0.ɵɵtext(5, \" Login Form \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"p\", 5);\n      i0.ɵɵtext(7, \"Don't have an a account. \");\n      i0.ɵɵelementStart(8, \"a\", 6);\n      i0.ɵɵtext(9, \" Register\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(10, \"form\", 7);\n      i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_Template_form_ngSubmit_10_listener() {\n        return ctx.login();\n      });\n      i0.ɵɵelementStart(11, \"div\", 8)(12, \"div\", 9);\n      i0.ɵɵelement(13, \"input\", 10);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(14, LoginComponent_p_14_Template, 2, 0, \"p\", 11);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(15, \"div\", 8)(16, \"div\", 9);\n      i0.ɵɵelement(17, \"input\", 12);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(18, LoginComponent_p_18_Template, 2, 0, \"p\", 11);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(19, \"button\", 13);\n      i0.ɵɵtext(20, \"Login\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(21, \"a\", 14);\n      i0.ɵɵtext(22, \" Forget your password\");\n      i0.ɵɵelementEnd()()()()();\n    }\n    if (rf & 2) {\n      let tmp_1_0;\n      let tmp_2_0;\n      i0.ɵɵadvance(10);\n      i0.ɵɵproperty(\"formGroup\", ctx.loginForm);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngIf\", ((tmp_1_0 = ctx.loginForm.get(\"username\")) == null ? null : tmp_1_0.errors == null ? null : tmp_1_0.errors[\"required\"]) && ((tmp_1_0 = ctx.loginForm.get(\"username\")) == null ? null : tmp_1_0[\"touched\"]));\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngIf\", ((tmp_2_0 = ctx.loginForm.get(\"password\")) == null ? null : tmp_2_0.errors == null ? null : tmp_2_0.errors[\"required\"]) && ((tmp_2_0 = ctx.loginForm.get(\"password\")) == null ? null : tmp_2_0[\"touched\"]));\n    }\n  },\n  dependencies: [i3.NgIf, i2.RouterLink, i4.ɵNgNoValidate, i4.DefaultValueAccessor, i4.NgControlStatus, i4.NgControlStatusGroup, i4.FormGroupDirective, i4.FormControlName],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["FormControl","FormGroup","Validators","Swal","i0","LoginComponent","constructor","accountService","router","username","required","password","ngOnInit","login","loginForm","value","subscribe","data","accountCheck","checkLogin","error","fire","findAccountByUsername","accountToken","setToken","token","setAccountToken","findById","id","res","account","statusAccount","i","roles","length","navigate","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\Administrator\\Desktop\\FE6\\FE_Module6\\src\\app\\User\\login\\login.component.ts","C:\\Users\\Administrator\\Desktop\\FE6\\FE_Module6\\src\\app\\User\\login\\login.component.html"],"sourcesContent":["import {Component, OnInit} from '@angular/core';\r\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\r\nimport {AccountService} from \"../../service/account/account.service\";\r\nimport {Router} from \"@angular/router\";\r\nimport Swal from \"sweetalert2\";\r\nimport {AccountToken} from \"../../models/AccountToken\";\r\nimport {Account} from \"../../models/Account\";\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css']\r\n})\r\nexport class LoginComponent implements OnInit{\r\n  constructor(private accountService: AccountService, private router: Router) {\r\n  }\r\n  ngOnInit(): void {\r\n\r\n  }\r\n  accountCheck!:AccountToken\r\naccount!:Account\r\n  loginForm = new FormGroup({\r\n    username: new FormControl(\"\", Validators.required),\r\n    password: new FormControl(\"\", Validators.required)\r\n\r\n  })\r\n  login(){\r\n    this.accountService.login(this.loginForm.value).subscribe((data) => {\r\n      this.accountCheck = data;\r\n      this.checkLogin(this.accountCheck)\r\n    }, (error) => {\r\n      Swal.fire(\r\n          ' ',\r\n          '<h2 style=\"color: red; font-size: 32px\">Login Fail!</h2>',\r\n          'error'\r\n      )\r\n    })\r\n  }\r\n\r\n  findAccountByUsername(username: String) {\r\n    this.accountService.findAccountByUsername(username).subscribe((data) => {\r\n    })\r\n  }\r\n\r\n  checkLogin(accountToken: AccountToken) {\r\n    this.accountService.setToken(accountToken.token);\r\n    this.accountService.setAccountToken(accountToken);\r\n    this.accountService.findById(accountToken.id).subscribe(res=>{\r\n      this.account=res;\r\n      if(this.account.statusAccount==1){\r\n        Swal.fire(\r\n            ' ',\r\n            '<h2 style=\"color: red; font-size: 32px\">The account has been banned</h2>',\r\n            'error'\r\n        )\r\n      }else {\r\n        Swal.fire(\r\n            ' ',\r\n            '<h2 style=\"color: green; font-size: 32px\">Đăng nhập thành công!!!</h2>',\r\n            'success'\r\n        )}\r\n      for (let i = 0; i < accountToken?.roles.length; i++) {\r\n        if (accountToken?.roles[i].id == 1) {\r\n          this.router.navigate([\"/admin\"]);\r\n          return;\r\n        }\r\n      }\r\n      this.router.navigate([\"/home\"]);});\r\n\r\n  }\r\n}\r\n","<!-- Content\r\n================================================== -->\r\n<div uk-height-viewport=\"expand: true\" class=\"uk-flex uk-flex-middle\">\r\n    <div class=\"uk-width-1-3@m uk-width-1-2@s m-auto\">\r\n        <div class=\"px-2 uk-animation-scale-up\">\r\n            <div class=\"my-4 uk-text-center\">\r\n                <h1 class=\"mb-2\"> Login Form  </h1>\r\n                <p class=\"my-2\">Don't have an a account. <a routerLink=\"/register\"> Register</a> </p>\r\n            </div>\r\n            <form [formGroup]=\"loginForm\" (ngSubmit)=\"login()\">\r\n\r\n                <div class=\"uk-form-group\">\r\n                    <div class=\"uk-position-relative w-100\">\r\n                        <input class=\"uk-input\" type=\"text\" placeholder=\"Your username\" formControlName=\"username\">\r\n                    </div>\r\n                    <p *ngIf=\"loginForm.get('username')?.errors?.['required'] && loginForm.get('username')?.['touched']\" style=\"color: red\">Vui lòng không để trống</p>\r\n                </div>\r\n\r\n                <div class=\"uk-form-group\">\r\n                    <div class=\"uk-position-relative w-100\">\r\n                        <input class=\"uk-input\" type=\"password\" placeholder=\"Your password\" formControlName=\"password\">\r\n                    </div>\r\n                    <p *ngIf=\"loginForm.get('password')?.errors?.['required'] && loginForm.get('password')?.['touched']\" style=\"color: red\">Vui lòng không để trống</p>\r\n                </div>\r\n\r\n                <button type=\"submit\" class=\"btn btn-primary btn-block mb-4\">Login</button>\r\n\r\n                <a href=\"#\" class=\"text-center uk-display-block\"> Forget your password</a>\r\n\r\n            </form>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n\r\n\r\n\r\n<!-- javaScripts\r\n================================================== -->"]},"metadata":{},"sourceType":"module","externalDependencies":[]}