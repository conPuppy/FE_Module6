{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AccountService {\n  constructor(http) {\n    this.http = http;\n    this.accounts = [];\n    this.url = 'http://localhost:8080/admin/accounts';\n  }\n  ngOnInit() {}\n  getAllProvider() {\n    return this.http.get(\"http://localhost:8080/accounts\");\n  }\n  createAccount(accountCreate) {\n    return this.http.post('http://localhost:8080/register', accountCreate);\n  }\n  findAccountByUsername(username) {\n    return this.http.get(`http://localhost:8080/register/findAccountByUsername/${username}`);\n  }\n  findAccountByEmail(email) {\n    return this.http.get(`http://localhost:8080/register/findAccountByEmail/${email}`);\n  }\n  getAllAccount(page) {\n    return this.http.get(this.url + '?page=' + page);\n  }\n  blockAccount(id) {\n    // @ts-ignore\n    return this.http.post(`http://localhost:8080/admin/accounts/block/${id}`);\n  }\n  search(stringSearch) {\n    return this.http.get(`http://localhost:8080/admin/search/${stringSearch}`);\n  }\n  findById(id) {\n    return this.http.get(`http://localhost:8080/admin/accounts/${id}`);\n  }\n  upVip(id) {\n    // @ts-ignore\n    return this.http.post(`http://localhost:8080/admin/accounts/vip/${id}`);\n  }\n  login(account) {\n    return this.http.post(\"http://localhost:8080/login\", account);\n  }\n  changeInfo(account) {\n    return this.http.post('', account);\n  }\n  setToken(token) {\n    localStorage.setItem(\"token\", token);\n  }\n  getToken() {\n    return localStorage.getItem(\"token\");\n  }\n  setAccountToken(accountToken) {\n    localStorage.setItem(\"accountToken\", JSON.stringify(accountToken));\n  }\n  getAccountToken() {\n    // @ts-ignore - nghĩa là không su dụng cú pháp của TS\n    return JSON.parse(localStorage.getItem(\"accountToken\"));\n  }\n}\nAccountService.ɵfac = function AccountService_Factory(t) {\n  return new (t || AccountService)(i0.ɵɵinject(i1.HttpClient));\n};\nAccountService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AccountService,\n  factory: AccountService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;AAWA,OAAM,MAAOA,cAAc;EAGvBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFxB,aAAQ,GAAc,EAAE;IAkBlB,QAAG,GAAG,sCAAsC;EAflD;EACAC,QAAQ,IACR;EACAC,cAAc;IACV,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAY,gCAAgC,CAAC;EACrE;EACAC,aAAa,CAACC,aAA2B;IACrC,OAAO,IAAI,CAACL,IAAI,CAACM,IAAI,CAAM,gCAAgC,EAACD,aAAa,CAAC;EAC9E;EACAE,qBAAqB,CAACC,QAAe;IACjC,OAAO,IAAI,CAACR,IAAI,CAACG,GAAG,CAAM,wDAAwDK,QAAQ,EAAE,CAAC;EACjG;EACAC,kBAAkB,CAACC,KAAY;IAC3B,OAAO,IAAI,CAACV,IAAI,CAACG,GAAG,CAAM,qDAAqDO,KAAK,EAAE,CAAC;EAC3F;EAIFC,aAAa,CAACC,IAAY;IACxB,OAAO,IAAI,CAACZ,IAAI,CAACG,GAAG,CAAM,IAAI,CAACU,GAAG,GAAG,QAAQ,GAAGD,IAAI,CAAC;EACvD;EAEAE,YAAY,CAACC,EAAU;IACrB;IACA,OAAO,IAAI,CAACf,IAAI,CAACM,IAAI,CAAM,8CAA8CS,EAAE,EAAE,CAAC;EAChF;EAEAC,MAAM,CAACC,YAAoB;IACzB,OAAO,IAAI,CAACjB,IAAI,CAACG,GAAG,CAAM,sCAAsCc,YAAY,EAAE,CAAC;EACjF;EAEAC,QAAQ,CAACH,EAAU;IACjB,OAAO,IAAI,CAACf,IAAI,CAACG,GAAG,CAAU,wCAAwCY,EAAE,EAAE,CAAC;EAC7E;EAEAI,KAAK,CAACJ,EAAU;IACd;IACA,OAAO,IAAI,CAACf,IAAI,CAACM,IAAI,CAAO,4CAA4CS,EAAE,EAAE,CAAC;EAC/E;EAEAK,KAAK,CAACC,OAAY;IAChB,OAAO,IAAI,CAACrB,IAAI,CAACM,IAAI,CAAe,6BAA6B,EAAEe,OAAO,CAAC;EAC7E;EACEC,UAAU,CAACD,OAAW;IACpB,OAAO,IAAI,CAACrB,IAAI,CAACM,IAAI,CAAM,EAAE,EAACe,OAAO,CAAC;EACxC;EACFE,QAAQ,CAACC,KAAa;IACpBC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEF,KAAK,CAAC;EACtC;EAEAG,QAAQ;IACN,OAAOF,YAAY,CAACG,OAAO,CAAC,OAAO,CAAC;EACtC;EAGAC,eAAe,CAACC,YAA0B;IACxCL,YAAY,CAACC,OAAO,CAAC,cAAc,EAAEK,IAAI,CAACC,SAAS,CAACF,YAAY,CAAC,CAAC;EACpE;EAEAG,eAAe;IACb;IACA,OAAOF,IAAI,CAACG,KAAK,CAACT,YAAY,CAACG,OAAO,CAAC,cAAc,CAAC,CAAC;EACzD;;AAlEW9B,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAAqC,SAAdrC,cAAc;EAAAsC,YAFX;AAAM","names":["AccountService","constructor","http","ngOnInit","getAllProvider","get","createAccount","accountCreate","post","findAccountByUsername","username","findAccountByEmail","email","getAllAccount","page","url","blockAccount","id","search","stringSearch","findById","upVip","login","account","changeInfo","setToken","token","localStorage","setItem","getToken","getItem","setAccountToken","accountToken","JSON","stringify","getAccountToken","parse","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Administrator\\Desktop\\FE6\\FE_Module6\\src\\app\\service\\account\\account.service.ts"],"sourcesContent":["\r\nimport {Injectable,OnInit} from '@angular/core';\r\nimport {Account} from \"../../model/Account\";\r\nimport {HttpClient} from \"@angular/common/http\";\r\nimport {Observable} from \"rxjs\";\r\nimport {AccountCreate} from \"../../model/AccountCreate\";\r\nimport {AccountToken} from \"../../models/AccountToken\";\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class AccountService implements OnInit{\r\n    accounts: Account[] = [];\r\n\r\n    constructor(private http: HttpClient) {\r\n    }\r\n    ngOnInit(): void {\r\n    }\r\n    getAllProvider(): Observable<Account[]> {\r\n        return this.http.get<Account[]>(\"http://localhost:8080/accounts\");\r\n    }\r\n    createAccount(accountCreate:AccountCreate):Observable<any>{\r\n        return this.http.post<any>('http://localhost:8080/register',accountCreate)\r\n    }\r\n    findAccountByUsername(username:String):Observable<any>{\r\n        return this.http.get<any>(`http://localhost:8080/register/findAccountByUsername/${username}`)\r\n    }\r\n    findAccountByEmail(email:String):Observable<any>{\r\n        return this.http.get<any>(`http://localhost:8080/register/findAccountByEmail/${email}`)\r\n    }\r\n  private url = 'http://localhost:8080/admin/accounts';\r\n\r\n\r\n  getAllAccount(page: number) :Observable<any>{\r\n    return this.http.get<any>(this.url + '?page=' + page);\r\n  }\r\n\r\n  blockAccount(id: number) :Observable<any> {\r\n    // @ts-ignore\r\n    return this.http.post<any>(`http://localhost:8080/admin/accounts/block/${id}`);\r\n  }\r\n\r\n  search(stringSearch: String) :Observable<any> {\r\n    return this.http.get<any>(`http://localhost:8080/admin/search/${stringSearch}`)\r\n  }\r\n\r\n  findById(id: number): Observable<Account> {\r\n    return this.http.get<Account>(`http://localhost:8080/admin/accounts/${id}`)\r\n  }\r\n\r\n  upVip(id: number): Observable<any> {\r\n    // @ts-ignore\r\n    return this.http.post <any>(`http://localhost:8080/admin/accounts/vip/${id}`);\r\n  }\r\n\r\n  login(account: any): Observable<AccountToken> {\r\n    return this.http.post<AccountToken>(\"http://localhost:8080/login\", account)\r\n  }\r\n    changeInfo(account:any):Observable<any>{\r\n      return this.http.post<any>('',account)\r\n    }\r\n  setToken(token: string) {\r\n    localStorage.setItem(\"token\", token)\r\n  }\r\n\r\n  getToken() {\r\n    return localStorage.getItem(\"token\")\r\n  }\r\n\r\n\r\n  setAccountToken(accountToken: AccountToken) {\r\n    localStorage.setItem(\"accountToken\", JSON.stringify(accountToken))\r\n  }\r\n\r\n  getAccountToken() {\r\n    // @ts-ignore - nghĩa là không su dụng cú pháp của TS\r\n    return JSON.parse(localStorage.getItem(\"accountToken\"))\r\n  }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}